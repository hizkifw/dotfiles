snippet imr import React from 'react'
	import React from 'react'

snippet cmp React function component without props
	const ${0} = () => {
		return null;
	}

	export default ${0};

snippet cmpp React function component with props
	export type ${0}Props = {};

	const ${0} = (props: ${0}Props) => {
		return null;
	}

	export default ${0};

snippet uef useEffect hook
	React.useEffect(() => {
		${2}
	}, [${1}]);

snippet ust useState hook
	const [${1:name}, set${1/(.)(.*)/${1:/upcase}${2}/}] = React.useState(${2:null});

snippet nextapp Next Custom App
	import type { AppProps } from 'next/app';

	const NextApp = ({ Component, pageProps }: AppProps) => (
		<Component {...pageProps} />
	);

	export default NextApp;

snippet nextdoc Next Custom Document
	import Document, { DocumentContext, Html, Head, Main, NextScript } from 'next/document';

	class MyDocument extends Document {
		static async getInitialProps(ctx: DocumentContext) {
			const initialProps = await Document.getInitialProps(ctx);
			return { ...initialProps };
		}

		render() {
			return (
				<Html>
					<Head />
					<body>
						<Main />
						<NextScript />
					</body>
				</Html>
			);
		}
	}

	export default MyDocument

snippet context React context
	import React from 'react';

	export type ${1}ContextType = {
		//
	}

	export const ${1}Context = React.createContext<${1}ContextType>({
		//
	});

	export const ${1}Provider = (props: any) => {
		return (
			<${1}Context.Provider
				value={{
					//
				}}
				{...props}
			/>
		);
	}

	export const use${1} = () => React.useContext(${1}Context);

snippet uqw useQuery hook
	export const useQuery${name:Name} = () =>
		useQuery(['${name/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}'], () => ${fn:null})

snippet uqwp useQuery hook with params
	export type ${name:Name}Params = {
		//
	};
	export const useQuery${name} = (params: ${name}Params) =>
		useQuery(['${name/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/downcase}${2:+-}${2:/downcase}/g}', params], () => ${fn:null})

snippet umu useMutation hook
	export const useMutate${name:Name} = () =>
		useMutation(() => ${fn:null})

snippet umup useMutation hook with params
	export type ${name:Name}Params = {
		//
	};
	export const useMutate${name} = () =>
		useMutation((params: ${name}Params) => ${fn:null})

snippet duqw Destructured useQuery hook usage
	const { isLoading, isError, data, error } = useQuery${1}();

